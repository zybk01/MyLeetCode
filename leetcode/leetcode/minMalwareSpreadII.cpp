#include "stdafx.h"
#include <algorithm>
#include <queue>
#include <vector>
#include <set>

using namespace std;
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        // for(auto& raws : graph) {
        //     for ()
        // }
        set<int> initSet;
        vector<int > group(graph.size());
        vector<set<int> > groupSet(graph.size());
        for (int i = 0 ;i < graph.size(); i++) {
            group[i] = i;
        }
        for(auto& i : initial) {
            initSet.insert(i);
        }
        // int g = 1;
        int size = graph.size();
        for (int i = 0 ;i < size; i++) {
            for (int j = 0 ;j < size; j++) {
                if (i!= j && graph[i][j] && initSet.count(i) == 0) {
                    {
                        if (initSet.count(j)) {
                            groupSet[group[i]].insert(j);
                        }
                        else {
                            {
                                if (group[j] != group[i]) {
                                    int remp = group[i];
                                    groupSet[group[j]].insert(groupSet[group[i]].begin(),groupSet[group[i]].end());
                                    groupSet[group[i]].clear();
                                    for (auto& g : group) {
                                        if (g == remp) {
                                            g = group[j];
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        sort(initial.begin(),initial.end());
        int maxIdx = 0;
        int links = 0;
        int Mlinks = 0;
        int idx = 0;
        maxIdx = initial[0];
        for (auto & i : initial) {
            idx = 0;
            links = 0;
            for(auto& gset:groupSet) {
                if(gset.size() == 1 && gset.count(i)) {
                    for(auto& g : group) {
                        if (g == group[idx]) {
                            links++;
                        }
                    }
                }
                idx++;
            }
            if (Mlinks < links) {
                Mlinks = links;
                maxIdx = i;
            }
        }
        return maxIdx;
    }
};