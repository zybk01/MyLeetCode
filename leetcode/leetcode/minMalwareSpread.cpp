#include "stdafx.h"
#include <algorithm>
#include <queue>
#include <vector>
#include <set>

using namespace std;
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        // for(auto& raws : graph) {
        //     for ()
        // }
        vector<int > group(graph.size());
        for (int i = 0 ;i < graph.size(); i++) {
            group[i] = i;
        }
        // int g = 1;
        for (int i = 0 ;i < graph.size(); i++) {
            for (int j = i + 1 ;j < graph.size(); j++) {
                if (graph[i][j]) {
                    if(group[i]==0 && group[j]==0) {
                        // group[i] = g;
                        // group[j] = g;
                        // g++;
                    }
                    else {
                        if (group[i]==0) {
                            group[i] = group[j];
                        }
                        else if(group[j]==0) {
                            group[j] = group[i];
                        }
                        else {
                            if (group[j] != group[i]) {
                                int remp = group[i];
                                for (auto& g : group) {
                                    if (g == remp) {
                                        g = group[j];
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        sort(initial.begin(),initial.end());
        int maxIdx = 0;
        int links = 0;
        int Mlinks = 0;
        int idx = 0;
        set<int> gset;
        for (auto & i : initial) {
            links = 0;
            gset.clear();
            // if (group[i] > 0) 
            {
                int node = 0;
                for (auto& g : group) {
                   if(g == group[i]) {
                        links++;
                        gset.insert(node);
                   }
                    node++;
                }
                int setN = 0;
                for (auto & j : initial) {
                    if(gset.count(j)) {
                        setN++;
                    }
                }
                if (setN == 1 && Mlinks < links) {
                    Mlinks = links;
                    maxIdx = idx;
                }
            }
            idx++;
        }
        return initial[maxIdx];
    }
};